// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
import fs from 'fs';
import path from 'path';

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API —Ñ–∞–π–ª–∞...\n');

// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ API —Ñ–∞–π–ª–∞
const apiPath = './src/api.ts';
let apiContent = '';

try {
  apiContent = fs.readFileSync(apiPath, 'utf8');
  console.log('‚úÖ API —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω');
  console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${apiContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è API —Ñ–∞–π–ª–∞:', error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
console.log('\nüîé –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤...');

const exports = [];
const exportRegex = /export\s+const\s+(\w+)/g;
let match;

while ((match = exportRegex.exec(apiContent)) !== null) {
  exports.push(match[1]);
}

console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã:', exports);

// –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º getProfile
const getProfileExport = apiContent.includes('export const getProfile');
const getProfileFunction = apiContent.includes('getProfile');

console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ getProfile:');
console.log('- export const getProfile –Ω–∞–π–¥–µ–Ω:', getProfileExport);
console.log('- —Ñ—É–Ω–∫—Ü–∏—è getProfile –Ω–∞–π–¥–µ–Ω:', getProfileFunction);

// –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å getProfile
const lines = apiContent.split('\n');
const getProfileLines = [];

lines.forEach((line, index) => {
  if (line.includes('getProfile')) {
    getProfileLines.push(`–°—Ç—Ä–æ–∫–∞ ${index + 1}: ${line.trim()}`);
  }
});

console.log('\nüìù –í—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è getProfile:');
getProfileLines.forEach(line => console.log(line));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...');

// –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
const problems = [];

if (apiContent.includes('};// ')) {
  problems.push('–ù–∞–π–¥–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ //');
}

if (apiContent.includes('export const getProfile') === false) {
  problems.push('export const getProfile –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

if (apiContent.includes('async getProfile()') === false) {
  problems.push('async getProfile() –≤ mockApi –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:', problems.length > 0 ? problems : '–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º');

// –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if (problems.length > 0) {
  console.log('\nüõ†Ô∏è –°–æ–∑–¥–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...');
  
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  let fixedContent = apiContent;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
  fixedContent = fixedContent.replace(/};\/\/ /g, '};\n\n// ');
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
  fs.writeFileSync('./src/api-fixed.ts', fixedContent);
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ api-fixed.ts');
}

console.log('\nüéØ –î–ò–ê–ì–ù–û–ó:');
if (getProfileExport) {
  console.log('‚úÖ getProfile —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('ü§î –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
  console.log('   1. –ö—ç—à–µ –±—Ä–∞—É–∑–µ—Ä–∞ - –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å (Ctrl+Shift+R)');
  console.log('   2. –ö—ç—à–µ Vite - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
  console.log('   3. TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å tsconfig.json');
} else {
  console.log('‚ùå getProfile –ù–ï —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è!');
  console.log('üîß –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å export const getProfile');
}

console.log('\nüìã –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
console.log('1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Ctrl+C)');
console.log('2. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: rm -rf node_modules/.vite');
console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: npm start');
console.log('4. –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+Shift+R)');